* EMCuda - Introduction
Welcome to EMCuda. This software project is my very own derivation of the topic I dealt within my master thesis: [[https://en.wikipedia.org/wiki/Whispering-gallery_wave][*Whispering Gallery Mode Resonators*]].
The goal of this project is to solve Maxwells Equations for a dielectric Resonator via a finite element approach. To achieve this goal modern programming techniques
solutions and environments  will be used. Such are:

- CUDA/C
- OpenGL
- NixOS
- Literate Programming

** CUDA/C
[[https://developer.nvidia.com/cuda-zone][CUDA(Compute Unified Device Architecture)]] let's one create a programming paradigm in which the strenghts of GPU(Graphical Processing Unit) are used
to tackle a certain computing problem. In this case maxwell equations are solved on a finite element grid via a graphics device, using the dedicated resources
a graphics card provides. In theory this computing approach should yield a much better performance in the time department compared to computing on CPU
architectures. The strenghts of CUDA is efficient unification of blocks and advanced parallelism of operations.

** OpenGL
The application will be established using [[https://www.opengl.org/][OpenGL]]. OpenGL will enforce various paradigms regarding visualization, grid- and boundary creation. Furthermore it will be  intervened
with CUDA to optimize the computation of the applications features.

** NixOS
[[https://nixos.org/][NixOS]] let's one use a specifically designed build environment for software. The dependencies needed for this project are all stored in *shell.nix*. If one would like
to use the deposited code of this repository the usage of *nix* ensures that no dependencies are missed. At the end the same application would be compiled on another machine.

** Literate Programming
[[http://www.literateprogramming.com/Literate][Literate Programming]] is as the computation of Maxwell's equations for solving certain types of electromagnetic problems  in the same spirit as illuminating people to understand
programming code. Using Emacs as an IDE allows the usage of [[https://orgmode.org/][org-mode]], which is a powerful workhorse(actually it's a unicorn) on the organization and documentation of one's projects and workflows.
One striking feature is the usage of code blocks:

#+begin_src cpp
#include <iostream>
#include <string>
int main() {
	std::cout << "You know it's cool!.\n";
	std::cout << std::endl;
	std::cout << "          }   {         ___ " << std::endl;
	std::cout << "          (o o)        (o o) " << std::endl;
	std::cout << "   /-------\\ /          \\ /-------\\ " << std::endl;
	std::cout << "  / | BULL |O            O| COW  | \\ " << std::endl;
	std::cout << " *  |-,--- |              |------|  * " << std::endl;
	std::cout << "    ^      ^              ^      ^ " << std::endl;
  std::cout << std::endl;
  return 0;
    }
#+end_src

#+RESULTS:
| You       | know | it's  | cool!.    |   |   |        |   |   |   |   |   |
|           |      |       |           |   |   |        |   |   |   |   |   |
| }         | {    | ___   |           |   |   |        |   |   |   |   |   |
| (o        | o)   | (o    | o)        |   |   |        |   |   |   |   |   |
| /-------\ | /    | \     | /-------\ |   |   |        |   |   |   |   |   |
| *         |      | -,--- |           |   |   | ------ |   | * |   |   |   |
| ^         | ^    | ^     | ^         |   |   |        |   |   |   |   |   |
|           |      |       |           |   |   |        |   |   |   |   |   |


* Highlighting of functions used
#+begin_src cuda


#include <iostream>
#include <string.h>
#include <math.h>
#include <thrust/iterator/counting_iterator.h>
#include <thrust/iterator/zip_iterator.h>
#include <thrust/device_vector.h>
#include <thrust/host_vector.h>
#include <thrust/functional.h>
#include <thrust/gather.h>
#include <cublas.h>
#include <thrust/for_each.h>
#include <thrust/partition.h>
#include <thrust/execution_policy.h>


//USE TO IMPLICIT CONVERT THRUST::VECTORS TO ARRAY FOR CUDA-KERNELS
template < typename T >
struct InputVectorToKernelArray
{
T* _array;
int _size;

// constructor allows for implicit conversion
KernelArray(thrust::device_vector<T>& dVec) {
    _array = thrust::raw_pointer_cast( &dVec[0] );
    _size  = ( int ) dVec.size();
}

};


// SPARSE MATRIX DIVISION
// SPARSE MATRIX-FORM IS IN TUPLE
// DIVIDE THE TUPLE BY A 1D-SEQUENCE
struct sparseDiMatrixDivision
{
    __host__ __device__
    thrust::tuple<float,float> operator()(const thrust::tuple<float,float>& spMat, const thrust::tuple<float> &divi) const
    {
      auto out = thrust::make_tuple(thrust::get<0>(spMat)/thrust::get<0>(divi),thrust::get<1>(spMat)/thrust::get<0>(divi));
      return out;
    }

};


//TAKEN FROM: https://github.com/NVIDIA/thrust/blob/master/examples/strided_range.cu
//CREATE A NEW SEQUENCE FROM AN EXISTING ONE.
//NEW SEQUENCE IS DESGINED BY A CHOSEN STRIDE NUMBER TO SKIP X ELEMENTS FROM EXISTING SEQ
template <typename Iterator>
class strided_range
{
    public:

    typedef typename thrust::iterator_difference<Iterator>::type difference_type;

    struct stride_functor : public thrust::unary_function<difference_type,difference_type>
    {
        difference_type stride;

        stride_functor(difference_type stride)
            : stride(stride) {}

        __host__ __device__
        difference_type operator()(const difference_type& i) const
        {
            return stride * i;
        }
    };

    typedef typename thrust::counting_iterator<difference_type>                   CountingIterator;
    typedef typename thrust::transform_iterator<stride_functor, CountingIterator> TransformIterator;
    typedef typename thrust::permutation_iterator<Iterator,TransformIterator>     PermutationIterator;

    // type of the strided_range iterator
    typedef PermutationIterator iterator;

    // construct strided_range for the range [first,last)
    strided_range(Iterator first, Iterator last, difference_type stride)
        : first(first), last(last), stride(stride) {}

    iterator begin(void) const
    {
        return PermutationIterator(first, TransformIterator(CountingIterator(0), stride_functor(stride)));
    }

    iterator end(void) const
    {
        return begin() + ((last - first) + (stride - 1)) / stride;
    }

    protected:
    Iterator first;
    Iterator last;
    difference_type stride;
};

//CREATES A TRIANGULAR MATRIX FROM TWO MATRICES (SEQUENCES) IN COMPRESSED SPARSE ROW ORIENTATION
__global__ void diMatMulToTriMat(float *d_A, float *d_B, float *d_C, int barrier, int* d_elem_scan, int *d_row_ptr, int *d_col_ptr)
{
int focus = blockIdx.x * blockDim.x + threadIdx.x;
    if ((focus < barrier))
        {

        float temp = 0;
        int k = 0;
        int d_elem_start = d_elem_scan[focus];
        int d_elem_end = d_elem_scan[focus+1];

        int elem = d_elem_end - d_elem_start;
        for(int i = 0; i < elem; i++)
        {
          //this is a temp fix because otherwise the wrong col-element gets pulled
          //A fix will be implemented within generalized upcoming linear algebra routines
          if(i==1)
          {
            temp += d_A[d_row_ptr[focus+i]] * d_B[d_col_ptr[focus+i+1]];
          }

         else
         {
            temp += d_A[d_row_ptr[focus+i]] * d_B[d_col_ptr[focus+i]];
         }
            //DEBUGGING
            //uncomment to see why the fix above is neccessary; the root of the problems lies within the combination of threading and loop-increment
            //printf(" thread: %i  row: %i  col: %i  inc: %i escan: %i temp: %f \n", focus,d_row_ptr[focus +i], d_col_ptr[focus +i], i, elem, temp );
        }
        d_C[focus] = temp;
        }
}

//ADDS A SEQUENCE TO THE DIAGONAL OF A TRIANGULAR MATRIX
void triangularDiagAdd(float *diagonal, float* addMe, int diagSize )
{

    for(int diagIdx = 0; diagIdx < diagSize; ++diagIdx)
        {
                if(diagIdx % 3 == 0)
                        {
                            diagonal[diagIdx] =diagonal[diagIdx] + addMe[diagIdx/3];
                        }
        }
}

//MATRIX MULTIPLICATION VIA MULTI-THREADING ON A 2D-GRID
__global__ void symmetricDenseMatrixMulKernel(float* d_A, float *d_B, float *d_C, int m, int n, int o, int p)
    {

        int row = blockIdx.y * blockDim.y + threadIdx.y;
        int col = blockIdx.x * blockDim.x + threadIdx.x;

        if ((row < p) && (col < p))
            {
            float d_cValue = 0;
            {
                for (int i = 0; i < p; ++i )
                    {
                        d_cValue += d_A[row*o+i]*d_B[i*p+col];
                    }
            }
            d_C[row*p+col] = d_cValue;
            }
    }




void print_matrix(const float *A, int nr_rows_A, int nr_cols_A) {

     for(int i = 0; i < nr_rows_A; ++i){
         for(int j = 0; j < nr_cols_A; ++j){
             std::cout << A[j * nr_rows_A + i] << " ";
         }
         std::cout << std::endl;
     }
     std::cout << std::endl;
 }

//CREATE A SEQUENCE TO CONTROL THE MULTIPLICATION INCREMENT FROM THE diMatMulToTriMat-Function
void stepThroughTriElements(int *elem_list, int size)
     {
        int offset = 2;
        int inc = 0;
        int i = 0;
        while (i < size)
        {

            if(i == 0)
                {
                    elem_list[i]=0;
                    ++i;
                }

            if(offset == 2)
            {
                inc +=2;
                elem_list[i] = inc;
                offset = 0;
                ++i;
            }

            else
            {
                ++inc;
                elem_list[i] =inc;
                ++offset;
                ++i;
            }
        }

     }

//CREATES A SEQUENCE THAT POINTS TO THE RIGHT COL-VALUE TO FULFILL THE diMatMulToTriMat-Function
void creatSeqPtrToCols(int *cols, int size)
{
    int barrier = 1;
    int even = 2;
    int normal = 0;
    for(int i = 0;  i < size; ++i)
        {
            if((barrier) !=2 || (i == 0) ){
                cols[i] = normal;
                ++normal;
                ++barrier;
                }

            else if((barrier == 2) &&( i != 0))
            {
                    cols[i]  = even;
                    barrier=0;
                    even+=2;
            }
            }
}

//CREATES A SEQUENCE THAT POINTS TO THE RIGHT COL-VALUE TO FULFILL THE diMatMulToTriMat-Function
void kernelRows(int *rows, int size)
    {

    int inc = 0;
    int k = 0;
    while(k <size)
        {
            if((k!=0)&&(k%3==0))
                {
                rows[k] = inc-1;
                ++k;
                }
            rows[k]=inc;
            ++inc;
            ++k;
            }
    }

void creatSeqPtrToRows(int *rows, int size)
    {

    int inc = 0;
    int k = 0;
    while(k <size)
        {
            if((k!=0)&&(k%3==0))
                {
                rows[k] = inc-1;
                ++k;
                }
            rows[k]=inc;
            ++inc;
            ++k;
            }
    }

#+end_src
